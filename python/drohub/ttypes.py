#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class FileResourceType(object):
    VIDEO = 0
    IMAGE = 1
    OTHER = 2

    _VALUES_TO_NAMES = {
        0: "VIDEO",
        1: "IMAGE",
        2: "OTHER",
    }

    _NAMES_TO_VALUES = {
        "VIDEO": 0,
        "IMAGE": 1,
        "OTHER": 2,
    }


class VideoType(object):
    VP8 = 0
    H264 = 1

    _VALUES_TO_NAMES = {
        0: "VP8",
        1: "H264",
    }

    _NAMES_TO_VALUES = {
        "VP8": 0,
        "H264": 1,
    }


class DroneVideoState(object):
    LIVE = 0
    STOPPED = 1
    DIED = 2
    INVALID_CONDITION = 3

    _VALUES_TO_NAMES = {
        0: "LIVE",
        1: "STOPPED",
        2: "DIED",
        3: "INVALID_CONDITION",
    }

    _NAMES_TO_VALUES = {
        "LIVE": 0,
        "STOPPED": 1,
        "DIED": 2,
        "INVALID_CONDITION": 3,
    }


class FlyingState(object):
    LANDED = 0
    TAKING_OFF = 1
    HOVERING = 2
    FLYING = 3
    LANDING = 4
    EMERGENCY = 5
    USER_TAKEOFF = 6
    MOTOR_RAMPING = 7
    EMERGENCY_LANDING = 8

    _VALUES_TO_NAMES = {
        0: "LANDED",
        1: "TAKING_OFF",
        2: "HOVERING",
        3: "FLYING",
        4: "LANDING",
        5: "EMERGENCY",
        6: "USER_TAKEOFF",
        7: "MOTOR_RAMPING",
        8: "EMERGENCY_LANDING",
    }

    _NAMES_TO_VALUES = {
        "LANDED": 0,
        "TAKING_OFF": 1,
        "HOVERING": 2,
        "FLYING": 3,
        "LANDING": 4,
        "EMERGENCY": 5,
        "USER_TAKEOFF": 6,
        "MOTOR_RAMPING": 7,
        "EMERGENCY_LANDING": 8,
    }


class FileEntry(object):
    """
    Attributes:
     - resource_id
     - thumbnail_id
     - resource_type

    """


    def __init__(self, resource_id=None, thumbnail_id=None, resource_type=None,):
        self.resource_id = resource_id
        self.thumbnail_id = thumbnail_id
        self.resource_type = resource_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.resource_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.thumbnail_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.resource_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileEntry')
        if self.resource_id is not None:
            oprot.writeFieldBegin('resource_id', TType.STRING, 1)
            oprot.writeString(self.resource_id.encode('utf-8') if sys.version_info[0] == 2 else self.resource_id)
            oprot.writeFieldEnd()
        if self.thumbnail_id is not None:
            oprot.writeFieldBegin('thumbnail_id', TType.STRING, 2)
            oprot.writeString(self.thumbnail_id.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnail_id)
            oprot.writeFieldEnd()
        if self.resource_type is not None:
            oprot.writeFieldBegin('resource_type', TType.I32, 3)
            oprot.writeI32(self.resource_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneSendVideoRequest(object):
    """
    Attributes:
     - rtp_url
     - video_type

    """


    def __init__(self, rtp_url=None, video_type=None,):
        self.rtp_url = rtp_url
        self.video_type = video_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.rtp_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.video_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneSendVideoRequest')
        if self.rtp_url is not None:
            oprot.writeFieldBegin('rtp_url', TType.STRING, 1)
            oprot.writeString(self.rtp_url.encode('utf-8') if sys.version_info[0] == 2 else self.rtp_url)
            oprot.writeFieldEnd()
        if self.video_type is not None:
            oprot.writeFieldBegin('video_type', TType.I32, 2)
            oprot.writeI32(self.video_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneVideoStateResult(object):
    """
    Attributes:
     - state
     - human_struct
     - rtp_url
     - serial
     - timestamp

    """


    def __init__(self, state=None, human_struct=None, rtp_url=None, serial=None, timestamp=None,):
        self.state = state
        self.human_struct = human_struct
        self.rtp_url = rtp_url
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.human_struct = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.rtp_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneVideoStateResult')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.human_struct is not None:
            oprot.writeFieldBegin('human_struct', TType.STRING, 2)
            oprot.writeString(self.human_struct.encode('utf-8') if sys.version_info[0] == 2 else self.human_struct)
            oprot.writeFieldEnd()
        if self.rtp_url is not None:
            oprot.writeFieldBegin('rtp_url', TType.STRING, 3)
            oprot.writeString(self.rtp_url.encode('utf-8') if sys.version_info[0] == 2 else self.rtp_url)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 4)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneFileList(object):
    """
    Attributes:
     - file_entries
     - serial
     - timestamp

    """


    def __init__(self, file_entries=None, serial=None, timestamp=None,):
        self.file_entries = file_entries
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.file_entries = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = FileEntry()
                        _elem5.read(iprot)
                        self.file_entries.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneFileList')
        if self.file_entries is not None:
            oprot.writeFieldBegin('file_entries', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.file_entries))
            for iter6 in self.file_entries:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 2)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneBatteryLevel(object):
    """
    Attributes:
     - battery_level_percent
     - serial
     - timestamp

    """


    def __init__(self, battery_level_percent=None, serial=None, timestamp=None,):
        self.battery_level_percent = battery_level_percent
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.battery_level_percent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneBatteryLevel')
        if self.battery_level_percent is not None:
            oprot.writeFieldBegin('battery_level_percent', TType.DOUBLE, 1)
            oprot.writeDouble(self.battery_level_percent)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 2)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneBatteryHealth(object):
    """
    Attributes:
     - battery_health_percent
     - serial
     - timestamp

    """


    def __init__(self, battery_health_percent=None, serial=None, timestamp=None,):
        self.battery_health_percent = battery_health_percent
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.battery_health_percent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneBatteryHealth')
        if self.battery_health_percent is not None:
            oprot.writeFieldBegin('battery_health_percent', TType.DOUBLE, 1)
            oprot.writeDouble(self.battery_health_percent)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 2)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneRadioSignal(object):
    """
    Attributes:
     - signal_quality
     - rssi
     - serial
     - timestamp

    """


    def __init__(self, signal_quality=None, rssi=None, serial=None, timestamp=None,):
        self.signal_quality = signal_quality
        self.rssi = rssi
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.signal_quality = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.rssi = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneRadioSignal')
        if self.signal_quality is not None:
            oprot.writeFieldBegin('signal_quality', TType.DOUBLE, 1)
            oprot.writeDouble(self.signal_quality)
            oprot.writeFieldEnd()
        if self.rssi is not None:
            oprot.writeFieldBegin('rssi', TType.DOUBLE, 2)
            oprot.writeDouble(self.rssi)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 3)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 4)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneFlyingState(object):
    """
    Attributes:
     - state
     - serial
     - timestamp

    """


    def __init__(self, state=None, serial=None, timestamp=None,):
        self.state = state
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneFlyingState')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 2)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneRequestPosition(object):
    """
    Attributes:
     - latitude
     - longitude
     - altitude
     - heading
     - serial

    """


    def __init__(self, latitude=None, longitude=None, altitude=None, heading=None, serial=None,):
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.heading = heading
        self.serial = serial

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.altitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.heading = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneRequestPosition')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.altitude)
            oprot.writeFieldEnd()
        if self.heading is not None:
            oprot.writeFieldBegin('heading', TType.DOUBLE, 4)
            oprot.writeDouble(self.heading)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 5)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DronePosition(object):
    """
    Attributes:
     - latitude
     - longitude
     - altitude
     - serial
     - timestamp

    """


    def __init__(self, latitude=None, longitude=None, altitude=None, serial=None, timestamp=None,):
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.altitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DronePosition')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.altitude is not None:
            oprot.writeFieldBegin('altitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.altitude)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 4)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 5)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DroneReply(object):
    """
    Attributes:
     - result
     - serial
     - timestamp

    """


    def __init__(self, result=None, serial=None, timestamp=None,):
        self.result = result
        self.serial = serial
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DroneReply')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 1)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 2)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FileEntry)
FileEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resource_id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'thumbnail_id', 'UTF8', None, ),  # 2
    (3, TType.I32, 'resource_type', None, None, ),  # 3
)
all_structs.append(DroneSendVideoRequest)
DroneSendVideoRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'rtp_url', 'UTF8', None, ),  # 1
    (2, TType.I32, 'video_type', None, None, ),  # 2
)
all_structs.append(DroneVideoStateResult)
DroneVideoStateResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'state', None, None, ),  # 1
    (2, TType.STRING, 'human_struct', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'rtp_url', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'serial', 'UTF8', None, ),  # 4
    (5, TType.I64, 'timestamp', None, None, ),  # 5
)
all_structs.append(DroneFileList)
DroneFileList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'file_entries', (TType.STRUCT, [FileEntry, None], False), None, ),  # 1
    (2, TType.STRING, 'serial', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(DroneBatteryLevel)
DroneBatteryLevel.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'battery_level_percent', None, None, ),  # 1
    (2, TType.STRING, 'serial', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(DroneBatteryHealth)
DroneBatteryHealth.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'battery_health_percent', None, None, ),  # 1
    (2, TType.STRING, 'serial', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(DroneRadioSignal)
DroneRadioSignal.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'signal_quality', None, None, ),  # 1
    (2, TType.DOUBLE, 'rssi', None, None, ),  # 2
    (3, TType.STRING, 'serial', 'UTF8', None, ),  # 3
    (4, TType.I64, 'timestamp', None, None, ),  # 4
)
all_structs.append(DroneFlyingState)
DroneFlyingState.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'state', None, None, ),  # 1
    (2, TType.STRING, 'serial', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(DroneRequestPosition)
DroneRequestPosition.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
    (3, TType.DOUBLE, 'altitude', None, None, ),  # 3
    (4, TType.DOUBLE, 'heading', None, None, ),  # 4
    (5, TType.STRING, 'serial', 'UTF8', None, ),  # 5
)
all_structs.append(DronePosition)
DronePosition.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
    (3, TType.DOUBLE, 'altitude', None, None, ),  # 3
    (4, TType.STRING, 'serial', 'UTF8', None, ),  # 4
    (5, TType.I64, 'timestamp', None, None, ),  # 5
)
all_structs.append(DroneReply)
DroneReply.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'result', None, None, ),  # 1
    (2, TType.STRING, 'serial', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
