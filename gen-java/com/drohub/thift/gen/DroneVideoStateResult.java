/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.drohub.thift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-01-14")
public class DroneVideoStateResult implements org.apache.thrift.TBase<DroneVideoStateResult, DroneVideoStateResult._Fields>, java.io.Serializable, Cloneable, Comparable<DroneVideoStateResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DroneVideoStateResult");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HUMAN_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("human_message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RTP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("rtp_url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DroneVideoStateResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DroneVideoStateResultTupleSchemeFactory();

  /**
   * 
   * @see DroneVideoState
   */
  public @org.apache.thrift.annotation.Nullable DroneVideoState state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String human_message; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String rtp_url; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String serial; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see DroneVideoState
     */
    STATE((short)1, "state"),
    HUMAN_MESSAGE((short)2, "human_message"),
    RTP_URL((short)3, "rtp_url"),
    SERIAL((short)4, "serial"),
    TIMESTAMP((short)5, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // HUMAN_MESSAGE
          return HUMAN_MESSAGE;
        case 3: // RTP_URL
          return RTP_URL;
        case 4: // SERIAL
          return SERIAL;
        case 5: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HUMAN_MESSAGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DroneVideoState.class)));
    tmpMap.put(_Fields.HUMAN_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("human_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RTP_URL, new org.apache.thrift.meta_data.FieldMetaData("rtp_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIAL, new org.apache.thrift.meta_data.FieldMetaData("serial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DroneVideoStateResult.class, metaDataMap);
  }

  public DroneVideoStateResult() {
  }

  public DroneVideoStateResult(
    DroneVideoState state,
    java.lang.String rtp_url,
    java.lang.String serial,
    long timestamp)
  {
    this();
    this.state = state;
    this.rtp_url = rtp_url;
    this.serial = serial;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DroneVideoStateResult(DroneVideoStateResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetHuman_message()) {
      this.human_message = other.human_message;
    }
    if (other.isSetRtp_url()) {
      this.rtp_url = other.rtp_url;
    }
    if (other.isSetSerial()) {
      this.serial = other.serial;
    }
    this.timestamp = other.timestamp;
  }

  public DroneVideoStateResult deepCopy() {
    return new DroneVideoStateResult(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.human_message = null;
    this.rtp_url = null;
    this.serial = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  /**
   * 
   * @see DroneVideoState
   */
  @org.apache.thrift.annotation.Nullable
  public DroneVideoState getState() {
    return this.state;
  }

  /**
   * 
   * @see DroneVideoState
   */
  public DroneVideoStateResult setState(@org.apache.thrift.annotation.Nullable DroneVideoState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHuman_message() {
    return this.human_message;
  }

  public DroneVideoStateResult setHuman_message(@org.apache.thrift.annotation.Nullable java.lang.String human_message) {
    this.human_message = human_message;
    return this;
  }

  public void unsetHuman_message() {
    this.human_message = null;
  }

  /** Returns true if field human_message is set (has been assigned a value) and false otherwise */
  public boolean isSetHuman_message() {
    return this.human_message != null;
  }

  public void setHuman_messageIsSet(boolean value) {
    if (!value) {
      this.human_message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRtp_url() {
    return this.rtp_url;
  }

  public DroneVideoStateResult setRtp_url(@org.apache.thrift.annotation.Nullable java.lang.String rtp_url) {
    this.rtp_url = rtp_url;
    return this;
  }

  public void unsetRtp_url() {
    this.rtp_url = null;
  }

  /** Returns true if field rtp_url is set (has been assigned a value) and false otherwise */
  public boolean isSetRtp_url() {
    return this.rtp_url != null;
  }

  public void setRtp_urlIsSet(boolean value) {
    if (!value) {
      this.rtp_url = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSerial() {
    return this.serial;
  }

  public DroneVideoStateResult setSerial(@org.apache.thrift.annotation.Nullable java.lang.String serial) {
    this.serial = serial;
    return this;
  }

  public void unsetSerial() {
    this.serial = null;
  }

  /** Returns true if field serial is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial() {
    return this.serial != null;
  }

  public void setSerialIsSet(boolean value) {
    if (!value) {
      this.serial = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public DroneVideoStateResult setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((DroneVideoState)value);
      }
      break;

    case HUMAN_MESSAGE:
      if (value == null) {
        unsetHuman_message();
      } else {
        setHuman_message((java.lang.String)value);
      }
      break;

    case RTP_URL:
      if (value == null) {
        unsetRtp_url();
      } else {
        setRtp_url((java.lang.String)value);
      }
      break;

    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case HUMAN_MESSAGE:
      return getHuman_message();

    case RTP_URL:
      return getRtp_url();

    case SERIAL:
      return getSerial();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case HUMAN_MESSAGE:
      return isSetHuman_message();
    case RTP_URL:
      return isSetRtp_url();
    case SERIAL:
      return isSetSerial();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DroneVideoStateResult)
      return this.equals((DroneVideoStateResult)that);
    return false;
  }

  public boolean equals(DroneVideoStateResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_human_message = true && this.isSetHuman_message();
    boolean that_present_human_message = true && that.isSetHuman_message();
    if (this_present_human_message || that_present_human_message) {
      if (!(this_present_human_message && that_present_human_message))
        return false;
      if (!this.human_message.equals(that.human_message))
        return false;
    }

    boolean this_present_rtp_url = true && this.isSetRtp_url();
    boolean that_present_rtp_url = true && that.isSetRtp_url();
    if (this_present_rtp_url || that_present_rtp_url) {
      if (!(this_present_rtp_url && that_present_rtp_url))
        return false;
      if (!this.rtp_url.equals(that.rtp_url))
        return false;
    }

    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (!this.serial.equals(that.serial))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetHuman_message()) ? 131071 : 524287);
    if (isSetHuman_message())
      hashCode = hashCode * 8191 + human_message.hashCode();

    hashCode = hashCode * 8191 + ((isSetRtp_url()) ? 131071 : 524287);
    if (isSetRtp_url())
      hashCode = hashCode * 8191 + rtp_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetSerial()) ? 131071 : 524287);
    if (isSetSerial())
      hashCode = hashCode * 8191 + serial.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(DroneVideoStateResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHuman_message(), other.isSetHuman_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHuman_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.human_message, other.human_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRtp_url(), other.isSetRtp_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtp_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtp_url, other.rtp_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSerial(), other.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial, other.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DroneVideoStateResult(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetHuman_message()) {
      if (!first) sb.append(", ");
      sb.append("human_message:");
      if (this.human_message == null) {
        sb.append("null");
      } else {
        sb.append(this.human_message);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("rtp_url:");
    if (this.rtp_url == null) {
      sb.append("null");
    } else {
      sb.append(this.rtp_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serial:");
    if (this.serial == null) {
      sb.append("null");
    } else {
      sb.append(this.serial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DroneVideoStateResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DroneVideoStateResultStandardScheme getScheme() {
      return new DroneVideoStateResultStandardScheme();
    }
  }

  private static class DroneVideoStateResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DroneVideoStateResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DroneVideoStateResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = com.drohub.thift.gen.DroneVideoState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HUMAN_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.human_message = iprot.readString();
              struct.setHuman_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RTP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rtp_url = iprot.readString();
              struct.setRtp_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serial = iprot.readString();
              struct.setSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DroneVideoStateResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.human_message != null) {
        if (struct.isSetHuman_message()) {
          oprot.writeFieldBegin(HUMAN_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.human_message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rtp_url != null) {
        oprot.writeFieldBegin(RTP_URL_FIELD_DESC);
        oprot.writeString(struct.rtp_url);
        oprot.writeFieldEnd();
      }
      if (struct.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(struct.serial);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DroneVideoStateResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DroneVideoStateResultTupleScheme getScheme() {
      return new DroneVideoStateResultTupleScheme();
    }
  }

  private static class DroneVideoStateResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DroneVideoStateResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DroneVideoStateResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetHuman_message()) {
        optionals.set(1);
      }
      if (struct.isSetRtp_url()) {
        optionals.set(2);
      }
      if (struct.isSetSerial()) {
        optionals.set(3);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetHuman_message()) {
        oprot.writeString(struct.human_message);
      }
      if (struct.isSetRtp_url()) {
        oprot.writeString(struct.rtp_url);
      }
      if (struct.isSetSerial()) {
        oprot.writeString(struct.serial);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DroneVideoStateResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.state = com.drohub.thift.gen.DroneVideoState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.human_message = iprot.readString();
        struct.setHuman_messageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rtp_url = iprot.readString();
        struct.setRtp_urlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serial = iprot.readString();
        struct.setSerialIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

