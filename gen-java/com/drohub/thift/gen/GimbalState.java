/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.drohub.thift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)")
public class GimbalState implements org.apache.thrift.TBase<GimbalState, GimbalState._Fields>, java.io.Serializable, Cloneable, Comparable<GimbalState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GimbalState");

  private static final org.apache.thrift.protocol.TField CALIBRATION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("calibration_state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("roll", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("pitch", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("yaw", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("min_roll", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("max_roll", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("min_yaw", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("max_yaw", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MIN_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("min_pitch", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pitch", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField IS_ROLL_STASTABILIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_roll_stastabilized", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_YAW_STABILIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_yaw_stabilized", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField IS_PITCH_STABILIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_pitch_stabilized", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("serial", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GimbalStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GimbalStateTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable GimbalCalibrationState calibration_state; // required
  public double roll; // required
  public double pitch; // required
  public double yaw; // required
  public double min_roll; // required
  public double max_roll; // required
  public double min_yaw; // required
  public double max_yaw; // required
  public double min_pitch; // required
  public double max_pitch; // required
  public boolean is_roll_stastabilized; // required
  public boolean is_yaw_stabilized; // required
  public boolean is_pitch_stabilized; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String serial; // required
  public long timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALIBRATION_STATE((short)1, "calibration_state"),
    ROLL((short)2, "roll"),
    PITCH((short)3, "pitch"),
    YAW((short)4, "yaw"),
    MIN_ROLL((short)5, "min_roll"),
    MAX_ROLL((short)6, "max_roll"),
    MIN_YAW((short)7, "min_yaw"),
    MAX_YAW((short)8, "max_yaw"),
    MIN_PITCH((short)9, "min_pitch"),
    MAX_PITCH((short)10, "max_pitch"),
    IS_ROLL_STASTABILIZED((short)11, "is_roll_stastabilized"),
    IS_YAW_STABILIZED((short)12, "is_yaw_stabilized"),
    IS_PITCH_STABILIZED((short)13, "is_pitch_stabilized"),
    SERIAL((short)14, "serial"),
    TIMESTAMP((short)15, "timestamp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALIBRATION_STATE
          return CALIBRATION_STATE;
        case 2: // ROLL
          return ROLL;
        case 3: // PITCH
          return PITCH;
        case 4: // YAW
          return YAW;
        case 5: // MIN_ROLL
          return MIN_ROLL;
        case 6: // MAX_ROLL
          return MAX_ROLL;
        case 7: // MIN_YAW
          return MIN_YAW;
        case 8: // MAX_YAW
          return MAX_YAW;
        case 9: // MIN_PITCH
          return MIN_PITCH;
        case 10: // MAX_PITCH
          return MAX_PITCH;
        case 11: // IS_ROLL_STASTABILIZED
          return IS_ROLL_STASTABILIZED;
        case 12: // IS_YAW_STABILIZED
          return IS_YAW_STABILIZED;
        case 13: // IS_PITCH_STABILIZED
          return IS_PITCH_STABILIZED;
        case 14: // SERIAL
          return SERIAL;
        case 15: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROLL_ISSET_ID = 0;
  private static final int __PITCH_ISSET_ID = 1;
  private static final int __YAW_ISSET_ID = 2;
  private static final int __MIN_ROLL_ISSET_ID = 3;
  private static final int __MAX_ROLL_ISSET_ID = 4;
  private static final int __MIN_YAW_ISSET_ID = 5;
  private static final int __MAX_YAW_ISSET_ID = 6;
  private static final int __MIN_PITCH_ISSET_ID = 7;
  private static final int __MAX_PITCH_ISSET_ID = 8;
  private static final int __IS_ROLL_STASTABILIZED_ISSET_ID = 9;
  private static final int __IS_YAW_STABILIZED_ISSET_ID = 10;
  private static final int __IS_PITCH_STABILIZED_ISSET_ID = 11;
  private static final int __TIMESTAMP_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALIBRATION_STATE, new org.apache.thrift.meta_data.FieldMetaData("calibration_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "GimbalCalibrationState")));
    tmpMap.put(_Fields.ROLL, new org.apache.thrift.meta_data.FieldMetaData("roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PITCH, new org.apache.thrift.meta_data.FieldMetaData("pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YAW, new org.apache.thrift.meta_data.FieldMetaData("yaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_ROLL, new org.apache.thrift.meta_data.FieldMetaData("min_roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_ROLL, new org.apache.thrift.meta_data.FieldMetaData("max_roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_YAW, new org.apache.thrift.meta_data.FieldMetaData("min_yaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_YAW, new org.apache.thrift.meta_data.FieldMetaData("max_yaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_PITCH, new org.apache.thrift.meta_data.FieldMetaData("min_pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_PITCH, new org.apache.thrift.meta_data.FieldMetaData("max_pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_ROLL_STASTABILIZED, new org.apache.thrift.meta_data.FieldMetaData("is_roll_stastabilized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_YAW_STABILIZED, new org.apache.thrift.meta_data.FieldMetaData("is_yaw_stabilized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PITCH_STABILIZED, new org.apache.thrift.meta_data.FieldMetaData("is_pitch_stabilized", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERIAL, new org.apache.thrift.meta_data.FieldMetaData("serial", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GimbalState.class, metaDataMap);
  }

  public GimbalState() {
  }

  public GimbalState(
    GimbalCalibrationState calibration_state,
    double roll,
    double pitch,
    double yaw,
    double min_roll,
    double max_roll,
    double min_yaw,
    double max_yaw,
    double min_pitch,
    double max_pitch,
    boolean is_roll_stastabilized,
    boolean is_yaw_stabilized,
    boolean is_pitch_stabilized,
    java.lang.String serial,
    long timestamp)
  {
    this();
    this.calibration_state = calibration_state;
    this.roll = roll;
    setRollIsSet(true);
    this.pitch = pitch;
    setPitchIsSet(true);
    this.yaw = yaw;
    setYawIsSet(true);
    this.min_roll = min_roll;
    setMin_rollIsSet(true);
    this.max_roll = max_roll;
    setMax_rollIsSet(true);
    this.min_yaw = min_yaw;
    setMin_yawIsSet(true);
    this.max_yaw = max_yaw;
    setMax_yawIsSet(true);
    this.min_pitch = min_pitch;
    setMin_pitchIsSet(true);
    this.max_pitch = max_pitch;
    setMax_pitchIsSet(true);
    this.is_roll_stastabilized = is_roll_stastabilized;
    setIs_roll_stastabilizedIsSet(true);
    this.is_yaw_stabilized = is_yaw_stabilized;
    setIs_yaw_stabilizedIsSet(true);
    this.is_pitch_stabilized = is_pitch_stabilized;
    setIs_pitch_stabilizedIsSet(true);
    this.serial = serial;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GimbalState(GimbalState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCalibration_state()) {
      this.calibration_state = other.calibration_state;
    }
    this.roll = other.roll;
    this.pitch = other.pitch;
    this.yaw = other.yaw;
    this.min_roll = other.min_roll;
    this.max_roll = other.max_roll;
    this.min_yaw = other.min_yaw;
    this.max_yaw = other.max_yaw;
    this.min_pitch = other.min_pitch;
    this.max_pitch = other.max_pitch;
    this.is_roll_stastabilized = other.is_roll_stastabilized;
    this.is_yaw_stabilized = other.is_yaw_stabilized;
    this.is_pitch_stabilized = other.is_pitch_stabilized;
    if (other.isSetSerial()) {
      this.serial = other.serial;
    }
    this.timestamp = other.timestamp;
  }

  public GimbalState deepCopy() {
    return new GimbalState(this);
  }

  @Override
  public void clear() {
    this.calibration_state = null;
    setRollIsSet(false);
    this.roll = 0.0;
    setPitchIsSet(false);
    this.pitch = 0.0;
    setYawIsSet(false);
    this.yaw = 0.0;
    setMin_rollIsSet(false);
    this.min_roll = 0.0;
    setMax_rollIsSet(false);
    this.max_roll = 0.0;
    setMin_yawIsSet(false);
    this.min_yaw = 0.0;
    setMax_yawIsSet(false);
    this.max_yaw = 0.0;
    setMin_pitchIsSet(false);
    this.min_pitch = 0.0;
    setMax_pitchIsSet(false);
    this.max_pitch = 0.0;
    setIs_roll_stastabilizedIsSet(false);
    this.is_roll_stastabilized = false;
    setIs_yaw_stabilizedIsSet(false);
    this.is_yaw_stabilized = false;
    setIs_pitch_stabilizedIsSet(false);
    this.is_pitch_stabilized = false;
    this.serial = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public GimbalCalibrationState getCalibration_state() {
    return this.calibration_state;
  }

  public GimbalState setCalibration_state(@org.apache.thrift.annotation.Nullable GimbalCalibrationState calibration_state) {
    this.calibration_state = calibration_state;
    return this;
  }

  public void unsetCalibration_state() {
    this.calibration_state = null;
  }

  /** Returns true if field calibration_state is set (has been assigned a value) and false otherwise */
  public boolean isSetCalibration_state() {
    return this.calibration_state != null;
  }

  public void setCalibration_stateIsSet(boolean value) {
    if (!value) {
      this.calibration_state = null;
    }
  }

  public double getRoll() {
    return this.roll;
  }

  public GimbalState setRoll(double roll) {
    this.roll = roll;
    setRollIsSet(true);
    return this;
  }

  public void unsetRoll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROLL_ISSET_ID);
  }

  /** Returns true if field roll is set (has been assigned a value) and false otherwise */
  public boolean isSetRoll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROLL_ISSET_ID);
  }

  public void setRollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROLL_ISSET_ID, value);
  }

  public double getPitch() {
    return this.pitch;
  }

  public GimbalState setPitch(double pitch) {
    this.pitch = pitch;
    setPitchIsSet(true);
    return this;
  }

  public void unsetPitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PITCH_ISSET_ID);
  }

  /** Returns true if field pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetPitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PITCH_ISSET_ID);
  }

  public void setPitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PITCH_ISSET_ID, value);
  }

  public double getYaw() {
    return this.yaw;
  }

  public GimbalState setYaw(double yaw) {
    this.yaw = yaw;
    setYawIsSet(true);
    return this;
  }

  public void unsetYaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YAW_ISSET_ID);
  }

  /** Returns true if field yaw is set (has been assigned a value) and false otherwise */
  public boolean isSetYaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YAW_ISSET_ID);
  }

  public void setYawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YAW_ISSET_ID, value);
  }

  public double getMin_roll() {
    return this.min_roll;
  }

  public GimbalState setMin_roll(double min_roll) {
    this.min_roll = min_roll;
    setMin_rollIsSet(true);
    return this;
  }

  public void unsetMin_roll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_ROLL_ISSET_ID);
  }

  /** Returns true if field min_roll is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_roll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_ROLL_ISSET_ID);
  }

  public void setMin_rollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_ROLL_ISSET_ID, value);
  }

  public double getMax_roll() {
    return this.max_roll;
  }

  public GimbalState setMax_roll(double max_roll) {
    this.max_roll = max_roll;
    setMax_rollIsSet(true);
    return this;
  }

  public void unsetMax_roll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ROLL_ISSET_ID);
  }

  /** Returns true if field max_roll is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_roll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ROLL_ISSET_ID);
  }

  public void setMax_rollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ROLL_ISSET_ID, value);
  }

  public double getMin_yaw() {
    return this.min_yaw;
  }

  public GimbalState setMin_yaw(double min_yaw) {
    this.min_yaw = min_yaw;
    setMin_yawIsSet(true);
    return this;
  }

  public void unsetMin_yaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_YAW_ISSET_ID);
  }

  /** Returns true if field min_yaw is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_yaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_YAW_ISSET_ID);
  }

  public void setMin_yawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_YAW_ISSET_ID, value);
  }

  public double getMax_yaw() {
    return this.max_yaw;
  }

  public GimbalState setMax_yaw(double max_yaw) {
    this.max_yaw = max_yaw;
    setMax_yawIsSet(true);
    return this;
  }

  public void unsetMax_yaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_YAW_ISSET_ID);
  }

  /** Returns true if field max_yaw is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_yaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_YAW_ISSET_ID);
  }

  public void setMax_yawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_YAW_ISSET_ID, value);
  }

  public double getMin_pitch() {
    return this.min_pitch;
  }

  public GimbalState setMin_pitch(double min_pitch) {
    this.min_pitch = min_pitch;
    setMin_pitchIsSet(true);
    return this;
  }

  public void unsetMin_pitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_PITCH_ISSET_ID);
  }

  /** Returns true if field min_pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_pitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_PITCH_ISSET_ID);
  }

  public void setMin_pitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_PITCH_ISSET_ID, value);
  }

  public double getMax_pitch() {
    return this.max_pitch;
  }

  public GimbalState setMax_pitch(double max_pitch) {
    this.max_pitch = max_pitch;
    setMax_pitchIsSet(true);
    return this;
  }

  public void unsetMax_pitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_PITCH_ISSET_ID);
  }

  /** Returns true if field max_pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_pitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_PITCH_ISSET_ID);
  }

  public void setMax_pitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_PITCH_ISSET_ID, value);
  }

  public boolean isIs_roll_stastabilized() {
    return this.is_roll_stastabilized;
  }

  public GimbalState setIs_roll_stastabilized(boolean is_roll_stastabilized) {
    this.is_roll_stastabilized = is_roll_stastabilized;
    setIs_roll_stastabilizedIsSet(true);
    return this;
  }

  public void unsetIs_roll_stastabilized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ROLL_STASTABILIZED_ISSET_ID);
  }

  /** Returns true if field is_roll_stastabilized is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_roll_stastabilized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ROLL_STASTABILIZED_ISSET_ID);
  }

  public void setIs_roll_stastabilizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ROLL_STASTABILIZED_ISSET_ID, value);
  }

  public boolean isIs_yaw_stabilized() {
    return this.is_yaw_stabilized;
  }

  public GimbalState setIs_yaw_stabilized(boolean is_yaw_stabilized) {
    this.is_yaw_stabilized = is_yaw_stabilized;
    setIs_yaw_stabilizedIsSet(true);
    return this;
  }

  public void unsetIs_yaw_stabilized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_YAW_STABILIZED_ISSET_ID);
  }

  /** Returns true if field is_yaw_stabilized is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_yaw_stabilized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_YAW_STABILIZED_ISSET_ID);
  }

  public void setIs_yaw_stabilizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_YAW_STABILIZED_ISSET_ID, value);
  }

  public boolean isIs_pitch_stabilized() {
    return this.is_pitch_stabilized;
  }

  public GimbalState setIs_pitch_stabilized(boolean is_pitch_stabilized) {
    this.is_pitch_stabilized = is_pitch_stabilized;
    setIs_pitch_stabilizedIsSet(true);
    return this;
  }

  public void unsetIs_pitch_stabilized() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PITCH_STABILIZED_ISSET_ID);
  }

  /** Returns true if field is_pitch_stabilized is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_pitch_stabilized() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PITCH_STABILIZED_ISSET_ID);
  }

  public void setIs_pitch_stabilizedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PITCH_STABILIZED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSerial() {
    return this.serial;
  }

  public GimbalState setSerial(@org.apache.thrift.annotation.Nullable java.lang.String serial) {
    this.serial = serial;
    return this;
  }

  public void unsetSerial() {
    this.serial = null;
  }

  /** Returns true if field serial is set (has been assigned a value) and false otherwise */
  public boolean isSetSerial() {
    return this.serial != null;
  }

  public void setSerialIsSet(boolean value) {
    if (!value) {
      this.serial = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public GimbalState setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CALIBRATION_STATE:
      if (value == null) {
        unsetCalibration_state();
      } else {
        setCalibration_state((GimbalCalibrationState)value);
      }
      break;

    case ROLL:
      if (value == null) {
        unsetRoll();
      } else {
        setRoll((java.lang.Double)value);
      }
      break;

    case PITCH:
      if (value == null) {
        unsetPitch();
      } else {
        setPitch((java.lang.Double)value);
      }
      break;

    case YAW:
      if (value == null) {
        unsetYaw();
      } else {
        setYaw((java.lang.Double)value);
      }
      break;

    case MIN_ROLL:
      if (value == null) {
        unsetMin_roll();
      } else {
        setMin_roll((java.lang.Double)value);
      }
      break;

    case MAX_ROLL:
      if (value == null) {
        unsetMax_roll();
      } else {
        setMax_roll((java.lang.Double)value);
      }
      break;

    case MIN_YAW:
      if (value == null) {
        unsetMin_yaw();
      } else {
        setMin_yaw((java.lang.Double)value);
      }
      break;

    case MAX_YAW:
      if (value == null) {
        unsetMax_yaw();
      } else {
        setMax_yaw((java.lang.Double)value);
      }
      break;

    case MIN_PITCH:
      if (value == null) {
        unsetMin_pitch();
      } else {
        setMin_pitch((java.lang.Double)value);
      }
      break;

    case MAX_PITCH:
      if (value == null) {
        unsetMax_pitch();
      } else {
        setMax_pitch((java.lang.Double)value);
      }
      break;

    case IS_ROLL_STASTABILIZED:
      if (value == null) {
        unsetIs_roll_stastabilized();
      } else {
        setIs_roll_stastabilized((java.lang.Boolean)value);
      }
      break;

    case IS_YAW_STABILIZED:
      if (value == null) {
        unsetIs_yaw_stabilized();
      } else {
        setIs_yaw_stabilized((java.lang.Boolean)value);
      }
      break;

    case IS_PITCH_STABILIZED:
      if (value == null) {
        unsetIs_pitch_stabilized();
      } else {
        setIs_pitch_stabilized((java.lang.Boolean)value);
      }
      break;

    case SERIAL:
      if (value == null) {
        unsetSerial();
      } else {
        setSerial((java.lang.String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CALIBRATION_STATE:
      return getCalibration_state();

    case ROLL:
      return getRoll();

    case PITCH:
      return getPitch();

    case YAW:
      return getYaw();

    case MIN_ROLL:
      return getMin_roll();

    case MAX_ROLL:
      return getMax_roll();

    case MIN_YAW:
      return getMin_yaw();

    case MAX_YAW:
      return getMax_yaw();

    case MIN_PITCH:
      return getMin_pitch();

    case MAX_PITCH:
      return getMax_pitch();

    case IS_ROLL_STASTABILIZED:
      return isIs_roll_stastabilized();

    case IS_YAW_STABILIZED:
      return isIs_yaw_stabilized();

    case IS_PITCH_STABILIZED:
      return isIs_pitch_stabilized();

    case SERIAL:
      return getSerial();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CALIBRATION_STATE:
      return isSetCalibration_state();
    case ROLL:
      return isSetRoll();
    case PITCH:
      return isSetPitch();
    case YAW:
      return isSetYaw();
    case MIN_ROLL:
      return isSetMin_roll();
    case MAX_ROLL:
      return isSetMax_roll();
    case MIN_YAW:
      return isSetMin_yaw();
    case MAX_YAW:
      return isSetMax_yaw();
    case MIN_PITCH:
      return isSetMin_pitch();
    case MAX_PITCH:
      return isSetMax_pitch();
    case IS_ROLL_STASTABILIZED:
      return isSetIs_roll_stastabilized();
    case IS_YAW_STABILIZED:
      return isSetIs_yaw_stabilized();
    case IS_PITCH_STABILIZED:
      return isSetIs_pitch_stabilized();
    case SERIAL:
      return isSetSerial();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GimbalState)
      return this.equals((GimbalState)that);
    return false;
  }

  public boolean equals(GimbalState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_calibration_state = true && this.isSetCalibration_state();
    boolean that_present_calibration_state = true && that.isSetCalibration_state();
    if (this_present_calibration_state || that_present_calibration_state) {
      if (!(this_present_calibration_state && that_present_calibration_state))
        return false;
      if (!this.calibration_state.equals(that.calibration_state))
        return false;
    }

    boolean this_present_roll = true;
    boolean that_present_roll = true;
    if (this_present_roll || that_present_roll) {
      if (!(this_present_roll && that_present_roll))
        return false;
      if (this.roll != that.roll)
        return false;
    }

    boolean this_present_pitch = true;
    boolean that_present_pitch = true;
    if (this_present_pitch || that_present_pitch) {
      if (!(this_present_pitch && that_present_pitch))
        return false;
      if (this.pitch != that.pitch)
        return false;
    }

    boolean this_present_yaw = true;
    boolean that_present_yaw = true;
    if (this_present_yaw || that_present_yaw) {
      if (!(this_present_yaw && that_present_yaw))
        return false;
      if (this.yaw != that.yaw)
        return false;
    }

    boolean this_present_min_roll = true;
    boolean that_present_min_roll = true;
    if (this_present_min_roll || that_present_min_roll) {
      if (!(this_present_min_roll && that_present_min_roll))
        return false;
      if (this.min_roll != that.min_roll)
        return false;
    }

    boolean this_present_max_roll = true;
    boolean that_present_max_roll = true;
    if (this_present_max_roll || that_present_max_roll) {
      if (!(this_present_max_roll && that_present_max_roll))
        return false;
      if (this.max_roll != that.max_roll)
        return false;
    }

    boolean this_present_min_yaw = true;
    boolean that_present_min_yaw = true;
    if (this_present_min_yaw || that_present_min_yaw) {
      if (!(this_present_min_yaw && that_present_min_yaw))
        return false;
      if (this.min_yaw != that.min_yaw)
        return false;
    }

    boolean this_present_max_yaw = true;
    boolean that_present_max_yaw = true;
    if (this_present_max_yaw || that_present_max_yaw) {
      if (!(this_present_max_yaw && that_present_max_yaw))
        return false;
      if (this.max_yaw != that.max_yaw)
        return false;
    }

    boolean this_present_min_pitch = true;
    boolean that_present_min_pitch = true;
    if (this_present_min_pitch || that_present_min_pitch) {
      if (!(this_present_min_pitch && that_present_min_pitch))
        return false;
      if (this.min_pitch != that.min_pitch)
        return false;
    }

    boolean this_present_max_pitch = true;
    boolean that_present_max_pitch = true;
    if (this_present_max_pitch || that_present_max_pitch) {
      if (!(this_present_max_pitch && that_present_max_pitch))
        return false;
      if (this.max_pitch != that.max_pitch)
        return false;
    }

    boolean this_present_is_roll_stastabilized = true;
    boolean that_present_is_roll_stastabilized = true;
    if (this_present_is_roll_stastabilized || that_present_is_roll_stastabilized) {
      if (!(this_present_is_roll_stastabilized && that_present_is_roll_stastabilized))
        return false;
      if (this.is_roll_stastabilized != that.is_roll_stastabilized)
        return false;
    }

    boolean this_present_is_yaw_stabilized = true;
    boolean that_present_is_yaw_stabilized = true;
    if (this_present_is_yaw_stabilized || that_present_is_yaw_stabilized) {
      if (!(this_present_is_yaw_stabilized && that_present_is_yaw_stabilized))
        return false;
      if (this.is_yaw_stabilized != that.is_yaw_stabilized)
        return false;
    }

    boolean this_present_is_pitch_stabilized = true;
    boolean that_present_is_pitch_stabilized = true;
    if (this_present_is_pitch_stabilized || that_present_is_pitch_stabilized) {
      if (!(this_present_is_pitch_stabilized && that_present_is_pitch_stabilized))
        return false;
      if (this.is_pitch_stabilized != that.is_pitch_stabilized)
        return false;
    }

    boolean this_present_serial = true && this.isSetSerial();
    boolean that_present_serial = true && that.isSetSerial();
    if (this_present_serial || that_present_serial) {
      if (!(this_present_serial && that_present_serial))
        return false;
      if (!this.serial.equals(that.serial))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCalibration_state()) ? 131071 : 524287);
    if (isSetCalibration_state())
      hashCode = hashCode * 8191 + calibration_state.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(roll);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pitch);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(yaw);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_roll);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_roll);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_yaw);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_yaw);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_pitch);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_pitch);

    hashCode = hashCode * 8191 + ((is_roll_stastabilized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_yaw_stabilized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((is_pitch_stabilized) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSerial()) ? 131071 : 524287);
    if (isSetSerial())
      hashCode = hashCode * 8191 + serial.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    return hashCode;
  }

  @Override
  public int compareTo(GimbalState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCalibration_state(), other.isSetCalibration_state());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalibration_state()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calibration_state, other.calibration_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoll(), other.isSetRoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roll, other.roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPitch(), other.isSetPitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pitch, other.pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetYaw(), other.isSetYaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yaw, other.yaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_roll(), other.isSetMin_roll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_roll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_roll, other.min_roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_roll(), other.isSetMax_roll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_roll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_roll, other.max_roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_yaw(), other.isSetMin_yaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_yaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_yaw, other.min_yaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_yaw(), other.isSetMax_yaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_yaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_yaw, other.max_yaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMin_pitch(), other.isSetMin_pitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_pitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_pitch, other.min_pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_pitch(), other.isSetMax_pitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_pitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pitch, other.max_pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_roll_stastabilized(), other.isSetIs_roll_stastabilized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_roll_stastabilized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_roll_stastabilized, other.is_roll_stastabilized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_yaw_stabilized(), other.isSetIs_yaw_stabilized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_yaw_stabilized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_yaw_stabilized, other.is_yaw_stabilized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_pitch_stabilized(), other.isSetIs_pitch_stabilized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_pitch_stabilized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_pitch_stabilized, other.is_pitch_stabilized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSerial(), other.isSetSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serial, other.serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GimbalState(");
    boolean first = true;

    sb.append("calibration_state:");
    if (this.calibration_state == null) {
      sb.append("null");
    } else {
      sb.append(this.calibration_state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roll:");
    sb.append(this.roll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pitch:");
    sb.append(this.pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yaw:");
    sb.append(this.yaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_roll:");
    sb.append(this.min_roll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_roll:");
    sb.append(this.max_roll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_yaw:");
    sb.append(this.min_yaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_yaw:");
    sb.append(this.max_yaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_pitch:");
    sb.append(this.min_pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_pitch:");
    sb.append(this.max_pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_roll_stastabilized:");
    sb.append(this.is_roll_stastabilized);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_yaw_stabilized:");
    sb.append(this.is_yaw_stabilized);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_pitch_stabilized:");
    sb.append(this.is_pitch_stabilized);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serial:");
    if (this.serial == null) {
      sb.append("null");
    } else {
      sb.append(this.serial);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GimbalStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GimbalStateStandardScheme getScheme() {
      return new GimbalStateStandardScheme();
    }
  }

  private static class GimbalStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<GimbalState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GimbalState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALIBRATION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.calibration_state = com.drohub.thift.gen.GimbalCalibrationState.findByValue(iprot.readI32());
              struct.setCalibration_stateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.roll = iprot.readDouble();
              struct.setRollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pitch = iprot.readDouble();
              struct.setPitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.yaw = iprot.readDouble();
              struct.setYawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min_roll = iprot.readDouble();
              struct.setMin_rollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_roll = iprot.readDouble();
              struct.setMax_rollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min_yaw = iprot.readDouble();
              struct.setMin_yawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_yaw = iprot.readDouble();
              struct.setMax_yawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MIN_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min_pitch = iprot.readDouble();
              struct.setMin_pitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_pitch = iprot.readDouble();
              struct.setMax_pitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_ROLL_STASTABILIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_roll_stastabilized = iprot.readBool();
              struct.setIs_roll_stastabilizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_YAW_STABILIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_yaw_stabilized = iprot.readBool();
              struct.setIs_yaw_stabilizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_PITCH_STABILIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_pitch_stabilized = iprot.readBool();
              struct.setIs_pitch_stabilizedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serial = iprot.readString();
              struct.setSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GimbalState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.calibration_state != null) {
        oprot.writeFieldBegin(CALIBRATION_STATE_FIELD_DESC);
        oprot.writeI32(struct.calibration_state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROLL_FIELD_DESC);
      oprot.writeDouble(struct.roll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PITCH_FIELD_DESC);
      oprot.writeDouble(struct.pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YAW_FIELD_DESC);
      oprot.writeDouble(struct.yaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_ROLL_FIELD_DESC);
      oprot.writeDouble(struct.min_roll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ROLL_FIELD_DESC);
      oprot.writeDouble(struct.max_roll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_YAW_FIELD_DESC);
      oprot.writeDouble(struct.min_yaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_YAW_FIELD_DESC);
      oprot.writeDouble(struct.max_yaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_PITCH_FIELD_DESC);
      oprot.writeDouble(struct.min_pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_PITCH_FIELD_DESC);
      oprot.writeDouble(struct.max_pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ROLL_STASTABILIZED_FIELD_DESC);
      oprot.writeBool(struct.is_roll_stastabilized);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_YAW_STABILIZED_FIELD_DESC);
      oprot.writeBool(struct.is_yaw_stabilized);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PITCH_STABILIZED_FIELD_DESC);
      oprot.writeBool(struct.is_pitch_stabilized);
      oprot.writeFieldEnd();
      if (struct.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(struct.serial);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GimbalStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GimbalStateTupleScheme getScheme() {
      return new GimbalStateTupleScheme();
    }
  }

  private static class GimbalStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<GimbalState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GimbalState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCalibration_state()) {
        optionals.set(0);
      }
      if (struct.isSetRoll()) {
        optionals.set(1);
      }
      if (struct.isSetPitch()) {
        optionals.set(2);
      }
      if (struct.isSetYaw()) {
        optionals.set(3);
      }
      if (struct.isSetMin_roll()) {
        optionals.set(4);
      }
      if (struct.isSetMax_roll()) {
        optionals.set(5);
      }
      if (struct.isSetMin_yaw()) {
        optionals.set(6);
      }
      if (struct.isSetMax_yaw()) {
        optionals.set(7);
      }
      if (struct.isSetMin_pitch()) {
        optionals.set(8);
      }
      if (struct.isSetMax_pitch()) {
        optionals.set(9);
      }
      if (struct.isSetIs_roll_stastabilized()) {
        optionals.set(10);
      }
      if (struct.isSetIs_yaw_stabilized()) {
        optionals.set(11);
      }
      if (struct.isSetIs_pitch_stabilized()) {
        optionals.set(12);
      }
      if (struct.isSetSerial()) {
        optionals.set(13);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetCalibration_state()) {
        oprot.writeI32(struct.calibration_state.getValue());
      }
      if (struct.isSetRoll()) {
        oprot.writeDouble(struct.roll);
      }
      if (struct.isSetPitch()) {
        oprot.writeDouble(struct.pitch);
      }
      if (struct.isSetYaw()) {
        oprot.writeDouble(struct.yaw);
      }
      if (struct.isSetMin_roll()) {
        oprot.writeDouble(struct.min_roll);
      }
      if (struct.isSetMax_roll()) {
        oprot.writeDouble(struct.max_roll);
      }
      if (struct.isSetMin_yaw()) {
        oprot.writeDouble(struct.min_yaw);
      }
      if (struct.isSetMax_yaw()) {
        oprot.writeDouble(struct.max_yaw);
      }
      if (struct.isSetMin_pitch()) {
        oprot.writeDouble(struct.min_pitch);
      }
      if (struct.isSetMax_pitch()) {
        oprot.writeDouble(struct.max_pitch);
      }
      if (struct.isSetIs_roll_stastabilized()) {
        oprot.writeBool(struct.is_roll_stastabilized);
      }
      if (struct.isSetIs_yaw_stabilized()) {
        oprot.writeBool(struct.is_yaw_stabilized);
      }
      if (struct.isSetIs_pitch_stabilized()) {
        oprot.writeBool(struct.is_pitch_stabilized);
      }
      if (struct.isSetSerial()) {
        oprot.writeString(struct.serial);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GimbalState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.calibration_state = com.drohub.thift.gen.GimbalCalibrationState.findByValue(iprot.readI32());
        struct.setCalibration_stateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.roll = iprot.readDouble();
        struct.setRollIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pitch = iprot.readDouble();
        struct.setPitchIsSet(true);
      }
      if (incoming.get(3)) {
        struct.yaw = iprot.readDouble();
        struct.setYawIsSet(true);
      }
      if (incoming.get(4)) {
        struct.min_roll = iprot.readDouble();
        struct.setMin_rollIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_roll = iprot.readDouble();
        struct.setMax_rollIsSet(true);
      }
      if (incoming.get(6)) {
        struct.min_yaw = iprot.readDouble();
        struct.setMin_yawIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_yaw = iprot.readDouble();
        struct.setMax_yawIsSet(true);
      }
      if (incoming.get(8)) {
        struct.min_pitch = iprot.readDouble();
        struct.setMin_pitchIsSet(true);
      }
      if (incoming.get(9)) {
        struct.max_pitch = iprot.readDouble();
        struct.setMax_pitchIsSet(true);
      }
      if (incoming.get(10)) {
        struct.is_roll_stastabilized = iprot.readBool();
        struct.setIs_roll_stastabilizedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.is_yaw_stabilized = iprot.readBool();
        struct.setIs_yaw_stabilizedIsSet(true);
      }
      if (incoming.get(12)) {
        struct.is_pitch_stabilized = iprot.readBool();
        struct.setIs_pitch_stabilizedIsSet(true);
      }
      if (incoming.get(13)) {
        struct.serial = iprot.readString();
        struct.setSerialIsSet(true);
      }
      if (incoming.get(14)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

