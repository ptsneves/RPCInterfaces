#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from drohub import Drone
from drohub.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  DroneReply pingService()')
    print('  DroneVideoStateResult sendVideoTo(DroneSendVideoRequest request)')
    print('  DroneVideoStateResult getVideoState(DroneSendVideoRequest request)')
    print('  DroneReply doTakeoff()')
    print('  DroneReply doLanding()')
    print('  DroneReply doReturnToHome()')
    print('  DronePosition getPosition()')
    print('  DroneBatteryLevel getBatteryLevel()')
    print('  DroneFlyingState getFlyingState()')
    print('  DroneRadioSignal getRadioSignal()')
    print('  DroneReply moveToPosition(DroneRequestPosition request)')
    print('  DroneFileList getFileList()')
    print('  DroneReply takePicture(DroneTakePictureRequest request)')
    print('  DroneReply recordVideo(DroneRecordVideoRequest request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Drone.Client(protocol)
transport.open()

if cmd == 'pingService':
    if len(args) != 0:
        print('pingService requires 0 args')
        sys.exit(1)
    pp.pprint(client.pingService())

elif cmd == 'sendVideoTo':
    if len(args) != 1:
        print('sendVideoTo requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendVideoTo(eval(args[0]),))

elif cmd == 'getVideoState':
    if len(args) != 1:
        print('getVideoState requires 1 args')
        sys.exit(1)
    pp.pprint(client.getVideoState(eval(args[0]),))

elif cmd == 'doTakeoff':
    if len(args) != 0:
        print('doTakeoff requires 0 args')
        sys.exit(1)
    pp.pprint(client.doTakeoff())

elif cmd == 'doLanding':
    if len(args) != 0:
        print('doLanding requires 0 args')
        sys.exit(1)
    pp.pprint(client.doLanding())

elif cmd == 'doReturnToHome':
    if len(args) != 0:
        print('doReturnToHome requires 0 args')
        sys.exit(1)
    pp.pprint(client.doReturnToHome())

elif cmd == 'getPosition':
    if len(args) != 0:
        print('getPosition requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPosition())

elif cmd == 'getBatteryLevel':
    if len(args) != 0:
        print('getBatteryLevel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBatteryLevel())

elif cmd == 'getFlyingState':
    if len(args) != 0:
        print('getFlyingState requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFlyingState())

elif cmd == 'getRadioSignal':
    if len(args) != 0:
        print('getRadioSignal requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRadioSignal())

elif cmd == 'moveToPosition':
    if len(args) != 1:
        print('moveToPosition requires 1 args')
        sys.exit(1)
    pp.pprint(client.moveToPosition(eval(args[0]),))

elif cmd == 'getFileList':
    if len(args) != 0:
        print('getFileList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFileList())

elif cmd == 'takePicture':
    if len(args) != 1:
        print('takePicture requires 1 args')
        sys.exit(1)
    pp.pprint(client.takePicture(eval(args[0]),))

elif cmd == 'recordVideo':
    if len(args) != 1:
        print('recordVideo requires 1 args')
        sys.exit(1)
    pp.pprint(client.recordVideo(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
