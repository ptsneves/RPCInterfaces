/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class GimbalState : TBase
{
  private GimbalCalibrationState _calibration_state;
  private double _roll;
  private double _pitch;
  private double _yaw;
  private double _min_roll;
  private double _max_roll;
  private double _min_yaw;
  private double _max_yaw;
  private double _min_pitch;
  private double _max_pitch;
  private bool _is_roll_stastabilized;
  private bool _is_yaw_stabilized;
  private bool _is_pitch_stabilized;
  private string _serial;
  private long _timestamp;

  public GimbalCalibrationState CalibrationState
  {
    get
    {
      return _calibration_state;
    }
    set
    {
      __isset.calibration_state = true;
      this._calibration_state = value;
    }
  }

  public double Roll
  {
    get
    {
      return _roll;
    }
    set
    {
      __isset.roll = true;
      this._roll = value;
    }
  }

  public double Pitch
  {
    get
    {
      return _pitch;
    }
    set
    {
      __isset.pitch = true;
      this._pitch = value;
    }
  }

  public double Yaw
  {
    get
    {
      return _yaw;
    }
    set
    {
      __isset.yaw = true;
      this._yaw = value;
    }
  }

  public double MinRoll
  {
    get
    {
      return _min_roll;
    }
    set
    {
      __isset.min_roll = true;
      this._min_roll = value;
    }
  }

  public double MaxRoll
  {
    get
    {
      return _max_roll;
    }
    set
    {
      __isset.max_roll = true;
      this._max_roll = value;
    }
  }

  public double MinYaw
  {
    get
    {
      return _min_yaw;
    }
    set
    {
      __isset.min_yaw = true;
      this._min_yaw = value;
    }
  }

  public double MaxYaw
  {
    get
    {
      return _max_yaw;
    }
    set
    {
      __isset.max_yaw = true;
      this._max_yaw = value;
    }
  }

  public double MinPitch
  {
    get
    {
      return _min_pitch;
    }
    set
    {
      __isset.min_pitch = true;
      this._min_pitch = value;
    }
  }

  public double MaxPitch
  {
    get
    {
      return _max_pitch;
    }
    set
    {
      __isset.max_pitch = true;
      this._max_pitch = value;
    }
  }

  public bool IsRollStastabilized
  {
    get
    {
      return _is_roll_stastabilized;
    }
    set
    {
      __isset.is_roll_stastabilized = true;
      this._is_roll_stastabilized = value;
    }
  }

  public bool IsYawStabilized
  {
    get
    {
      return _is_yaw_stabilized;
    }
    set
    {
      __isset.is_yaw_stabilized = true;
      this._is_yaw_stabilized = value;
    }
  }

  public bool IsPitchStabilized
  {
    get
    {
      return _is_pitch_stabilized;
    }
    set
    {
      __isset.is_pitch_stabilized = true;
      this._is_pitch_stabilized = value;
    }
  }

  public string Serial
  {
    get
    {
      return _serial;
    }
    set
    {
      __isset.serial = true;
      this._serial = value;
    }
  }

  public long Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool calibration_state;
    public bool roll;
    public bool pitch;
    public bool yaw;
    public bool min_roll;
    public bool max_roll;
    public bool min_yaw;
    public bool max_yaw;
    public bool min_pitch;
    public bool max_pitch;
    public bool is_roll_stastabilized;
    public bool is_yaw_stabilized;
    public bool is_pitch_stabilized;
    public bool serial;
    public bool timestamp;
  }

  public GimbalState()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              CalibrationState = (GimbalCalibrationState)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Double)
            {
              Roll = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Double)
            {
              Pitch = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Double)
            {
              Yaw = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Double)
            {
              MinRoll = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Double)
            {
              MaxRoll = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Double)
            {
              MinYaw = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Double)
            {
              MaxYaw = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Double)
            {
              MinPitch = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Double)
            {
              MaxPitch = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Bool)
            {
              IsRollStastabilized = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Bool)
            {
              IsYawStabilized = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Bool)
            {
              IsPitchStabilized = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.String)
            {
              Serial = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.I64)
            {
              Timestamp = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("GimbalState");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.calibration_state)
      {
        field.Name = "calibration_state";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)CalibrationState, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.roll)
      {
        field.Name = "roll";
        field.Type = TType.Double;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(Roll, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.pitch)
      {
        field.Name = "pitch";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(Pitch, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.yaw)
      {
        field.Name = "yaw";
        field.Type = TType.Double;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(Yaw, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.min_roll)
      {
        field.Name = "min_roll";
        field.Type = TType.Double;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MinRoll, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.max_roll)
      {
        field.Name = "max_roll";
        field.Type = TType.Double;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MaxRoll, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.min_yaw)
      {
        field.Name = "min_yaw";
        field.Type = TType.Double;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MinYaw, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.max_yaw)
      {
        field.Name = "max_yaw";
        field.Type = TType.Double;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MaxYaw, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.min_pitch)
      {
        field.Name = "min_pitch";
        field.Type = TType.Double;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MinPitch, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.max_pitch)
      {
        field.Name = "max_pitch";
        field.Type = TType.Double;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(MaxPitch, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.is_roll_stastabilized)
      {
        field.Name = "is_roll_stastabilized";
        field.Type = TType.Bool;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsRollStastabilized, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.is_yaw_stabilized)
      {
        field.Name = "is_yaw_stabilized";
        field.Type = TType.Bool;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsYawStabilized, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.is_pitch_stabilized)
      {
        field.Name = "is_pitch_stabilized";
        field.Type = TType.Bool;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsPitchStabilized, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Serial != null && __isset.serial)
      {
        field.Name = "serial";
        field.Type = TType.String;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Serial, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.timestamp)
      {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as GimbalState;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.calibration_state == other.__isset.calibration_state) && ((!__isset.calibration_state) || (System.Object.Equals(CalibrationState, other.CalibrationState))))
      && ((__isset.roll == other.__isset.roll) && ((!__isset.roll) || (System.Object.Equals(Roll, other.Roll))))
      && ((__isset.pitch == other.__isset.pitch) && ((!__isset.pitch) || (System.Object.Equals(Pitch, other.Pitch))))
      && ((__isset.yaw == other.__isset.yaw) && ((!__isset.yaw) || (System.Object.Equals(Yaw, other.Yaw))))
      && ((__isset.min_roll == other.__isset.min_roll) && ((!__isset.min_roll) || (System.Object.Equals(MinRoll, other.MinRoll))))
      && ((__isset.max_roll == other.__isset.max_roll) && ((!__isset.max_roll) || (System.Object.Equals(MaxRoll, other.MaxRoll))))
      && ((__isset.min_yaw == other.__isset.min_yaw) && ((!__isset.min_yaw) || (System.Object.Equals(MinYaw, other.MinYaw))))
      && ((__isset.max_yaw == other.__isset.max_yaw) && ((!__isset.max_yaw) || (System.Object.Equals(MaxYaw, other.MaxYaw))))
      && ((__isset.min_pitch == other.__isset.min_pitch) && ((!__isset.min_pitch) || (System.Object.Equals(MinPitch, other.MinPitch))))
      && ((__isset.max_pitch == other.__isset.max_pitch) && ((!__isset.max_pitch) || (System.Object.Equals(MaxPitch, other.MaxPitch))))
      && ((__isset.is_roll_stastabilized == other.__isset.is_roll_stastabilized) && ((!__isset.is_roll_stastabilized) || (System.Object.Equals(IsRollStastabilized, other.IsRollStastabilized))))
      && ((__isset.is_yaw_stabilized == other.__isset.is_yaw_stabilized) && ((!__isset.is_yaw_stabilized) || (System.Object.Equals(IsYawStabilized, other.IsYawStabilized))))
      && ((__isset.is_pitch_stabilized == other.__isset.is_pitch_stabilized) && ((!__isset.is_pitch_stabilized) || (System.Object.Equals(IsPitchStabilized, other.IsPitchStabilized))))
      && ((__isset.serial == other.__isset.serial) && ((!__isset.serial) || (System.Object.Equals(Serial, other.Serial))))
      && ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (System.Object.Equals(Timestamp, other.Timestamp))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.calibration_state)
        hashcode = (hashcode * 397) + CalibrationState.GetHashCode();
      if(__isset.roll)
        hashcode = (hashcode * 397) + Roll.GetHashCode();
      if(__isset.pitch)
        hashcode = (hashcode * 397) + Pitch.GetHashCode();
      if(__isset.yaw)
        hashcode = (hashcode * 397) + Yaw.GetHashCode();
      if(__isset.min_roll)
        hashcode = (hashcode * 397) + MinRoll.GetHashCode();
      if(__isset.max_roll)
        hashcode = (hashcode * 397) + MaxRoll.GetHashCode();
      if(__isset.min_yaw)
        hashcode = (hashcode * 397) + MinYaw.GetHashCode();
      if(__isset.max_yaw)
        hashcode = (hashcode * 397) + MaxYaw.GetHashCode();
      if(__isset.min_pitch)
        hashcode = (hashcode * 397) + MinPitch.GetHashCode();
      if(__isset.max_pitch)
        hashcode = (hashcode * 397) + MaxPitch.GetHashCode();
      if(__isset.is_roll_stastabilized)
        hashcode = (hashcode * 397) + IsRollStastabilized.GetHashCode();
      if(__isset.is_yaw_stabilized)
        hashcode = (hashcode * 397) + IsYawStabilized.GetHashCode();
      if(__isset.is_pitch_stabilized)
        hashcode = (hashcode * 397) + IsPitchStabilized.GetHashCode();
      if(__isset.serial)
        hashcode = (hashcode * 397) + Serial.GetHashCode();
      if(__isset.timestamp)
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("GimbalState(");
    bool __first = true;
    if (__isset.calibration_state)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("CalibrationState: ");
      sb.Append(CalibrationState);
    }
    if (__isset.roll)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Roll: ");
      sb.Append(Roll);
    }
    if (__isset.pitch)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Pitch: ");
      sb.Append(Pitch);
    }
    if (__isset.yaw)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Yaw: ");
      sb.Append(Yaw);
    }
    if (__isset.min_roll)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MinRoll: ");
      sb.Append(MinRoll);
    }
    if (__isset.max_roll)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MaxRoll: ");
      sb.Append(MaxRoll);
    }
    if (__isset.min_yaw)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MinYaw: ");
      sb.Append(MinYaw);
    }
    if (__isset.max_yaw)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MaxYaw: ");
      sb.Append(MaxYaw);
    }
    if (__isset.min_pitch)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MinPitch: ");
      sb.Append(MinPitch);
    }
    if (__isset.max_pitch)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MaxPitch: ");
      sb.Append(MaxPitch);
    }
    if (__isset.is_roll_stastabilized)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IsRollStastabilized: ");
      sb.Append(IsRollStastabilized);
    }
    if (__isset.is_yaw_stabilized)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IsYawStabilized: ");
      sb.Append(IsYawStabilized);
    }
    if (__isset.is_pitch_stabilized)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IsPitchStabilized: ");
      sb.Append(IsPitchStabilized);
    }
    if (Serial != null && __isset.serial)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Serial: ");
      sb.Append(Serial);
    }
    if (__isset.timestamp)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Timestamp: ");
      sb.Append(Timestamp);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

