/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FileEntry : TBase
{
  private string _resource_id;
  private string _thumbnail_id;
  private FileResourceType _resource_type;

  public string ResourceId
  {
    get
    {
      return _resource_id;
    }
    set
    {
      __isset.resource_id = true;
      this._resource_id = value;
    }
  }

  public string ThumbnailId
  {
    get
    {
      return _thumbnail_id;
    }
    set
    {
      __isset.thumbnail_id = true;
      this._thumbnail_id = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FileResourceType"/>
  /// </summary>
  public FileResourceType ResourceType
  {
    get
    {
      return _resource_type;
    }
    set
    {
      __isset.resource_type = true;
      this._resource_type = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool resource_id;
    public bool thumbnail_id;
    public bool resource_type;
  }

  public FileEntry()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ResourceId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ThumbnailId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              ResourceType = (FileResourceType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FileEntry");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (ResourceId != null && __isset.resource_id)
      {
        field.Name = "resource_id";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ResourceId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (ThumbnailId != null && __isset.thumbnail_id)
      {
        field.Name = "thumbnail_id";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(ThumbnailId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.resource_type)
      {
        field.Name = "resource_type";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ResourceType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FileEntry;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.resource_id == other.__isset.resource_id) && ((!__isset.resource_id) || (System.Object.Equals(ResourceId, other.ResourceId))))
      && ((__isset.thumbnail_id == other.__isset.thumbnail_id) && ((!__isset.thumbnail_id) || (System.Object.Equals(ThumbnailId, other.ThumbnailId))))
      && ((__isset.resource_type == other.__isset.resource_type) && ((!__isset.resource_type) || (System.Object.Equals(ResourceType, other.ResourceType))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.resource_id)
        hashcode = (hashcode * 397) + ResourceId.GetHashCode();
      if(__isset.thumbnail_id)
        hashcode = (hashcode * 397) + ThumbnailId.GetHashCode();
      if(__isset.resource_type)
        hashcode = (hashcode * 397) + ResourceType.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FileEntry(");
    bool __first = true;
    if (ResourceId != null && __isset.resource_id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ResourceId: ");
      sb.Append(ResourceId);
    }
    if (ThumbnailId != null && __isset.thumbnail_id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ThumbnailId: ");
      sb.Append(ThumbnailId);
    }
    if (__isset.resource_type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ResourceType: ");
      sb.Append(ResourceType);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

